<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry type="method" name="QUnit.module">
	<title>QUnit.module()</title>
	<signature>
		<argument name="name" type="String">
			<desc>Label for this group of tests</desc>
		</argument>
		<argument name="hooks" type="PlainObject">
			<desc>Callbacks to run before and after each test</desc>
			<property name="beforeEach" type="Function">
				<desc>Runs before each test</desc>
			</property>
			<property name="afterEach" type="Function">
				<desc>Runs after each test</desc>
			</property>
		</argument>
	</signature>
	<desc>
		Group related tests under a single label.
	</desc>
	<longdesc>
		<p>
			All tests that occur after a call to <code>QUnit.module()</code> will be grouped into that module, until other <code>QUnit.module()</code> is called. The test names will all be preceded by the module name in the test results. You can then use that module name to select tests to run.
		</p>
		<p>
			You can specify code to run before and after each test using the hooks argument, and also to create properties that will be shared on the context of each test. Any additional properties on the hooks object will be added to that context. The callbacks can also be used to add properties.
		</p>
	</longdesc>
	<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "group a" );
QUnit.test( "a basic test example", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 2", function( assert ) {
	assert.ok( true, "this test is fine" );
});

QUnit.module( "group b" );
QUnit.test( "a basic test example 3", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 4", function() {
	assert.ok( true, "this test is fine" );
});
]]></code>
	</example>
	<example>
		<desc>A sample for using the beforeEach and afterEach callbacks</desc>
<code><![CDATA[
QUnit.module( "module A", {
	beforeEach: function() {
		// prepare something for all following tests
	},
	afterEach: function() {
		// clean up after each test
	}
});
]]></code>
	</example>
	<example>
		<desc>Hooks properties are shared on respective test context</desc>
<code><![CDATA[
QUnit.module( "Machine Maker", {
    beforeEach: function() {
        this.maker = new Maker();
    },
    parts: [ "wheels", "motor", "chassis" ]
});

QUnit.test( "makes a robot", function( assert ) {
	this.parts.push( "arduino" );
	assert.equal( this.maker( this.parts ), "robot" );
	assert.deepEqual( this.maker.made, [ "robot" ] );
});

QUnit.test( "makes a car", function( assert ) {
	assert.equal( this.maker( this.parts ), "car" );
	this.maker.duplicate();
	assert.deepEqual( this.maker.made, [ "car", "car" ] );
});

]]></code>
	</example>
	<category slug="test"/>
</entry>
