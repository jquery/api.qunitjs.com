<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry type="method" name="QUnit.module">
	<title>QUnit.module()</title>
	<signature>
		<argument name="name" type="String">
			<desc>Label for this group of tests</desc>
		</argument>
		<argument name="hooks" type="PlainObject" optional="true">
			<desc>Callbacks to run before and after each test</desc>
			<property name="beforeEach" type="Function">
				<desc>Runs before each test</desc>
			</property>
			<property name="afterEach" type="Function">
				<desc>Runs after each test</desc>
			</property>
		</argument>
		<argument name="grouped_tests" optional="true">
			<desc>A function with grouped tests</desc>
			<type name="Function">
				<argument name="hooks" type="Object"></argument>
			</type>
		</argument>
	</signature>
	<desc>
		Group related tests under a single label.
	</desc>
	<longdesc>
		<p>
			You can then use the module name to organize, select and filter tests to run.
		</p>
		<p>
			All tests inside a module callback function will be grouped into that module. The test names will all be preceded by the module name in the test results. If <code>QUnit.module</code> is defined without a function argument, All subsequently defined tests will be grouped into the module until another module is defined.
		</p>
		<p>
			Modules with grouped tests functions allow defining nested modules, and QUnit will run tests on the parent module before going deep on the nested ones, even if they're declared first. <code>beforeEach</code> and <code>afterEach</code> callbacks on a nested module call will stack to the parent hooks.
		</p>
		<p>
			You can specify code to run before and after each test using the hooks argument, and also to create properties that will be shared on the context of each test. Any additional properties on the hooks object will be added to that context. The hooks parameter is argument is still optional if you call <code>QUnit.module</code> with a callback argument.
		</p>
		<p>
			The module callback is invoked with the test environment as its <code>this</code> context, which properties are shared to its tests, hooks and nested modules. Note that changes on tests <code>this</code> won't affect sibling tests, where <code>this</code> will be reset to the same value for each test.
		</p>
		<p class="warning">
			<strong>DEPRECATION Note:</strong> <code>beforeEach</code> and <code>afterEach</code> were previously named <code>setup</code> and <code>teardown</code>, which still exist and will be removed in QUnit 2.0.0.
		</p>
	</longdesc>
	<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "group a" );
QUnit.test( "a basic test example", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 2", function( assert ) {
	assert.ok( true, "this test is fine" );
});

QUnit.module( "group b" );
QUnit.test( "a basic test example 3", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 4", function( assert ) {
	assert.ok( true, "this test is fine" );
});
]]></code>
	</example>
		<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "module a", function( test ) {
	test( "a basic test example", function( assert ) {
		assert.ok( true, "this test is fine" );
	});
});

QUnit.module( "module b", function( test ) {
	test( "a basic test example 2", function( assert ) {
		assert.ok( true, "this test is fine" );
	});

	QUnit.module( "nested module b.1", function( test ) {
		test( "a basic test example 3", function( assert ) {
			assert.ok( true, "this test is fine" );
		});
	});
});
]]></code>
	</example>
	<example>
		<desc>A sample for using the beforeEach and afterEach callbacks</desc>
<code><![CDATA[
QUnit.module( "module A", {
	beforeEach: function() {
		// prepare something for all following tests
	},
	afterEach: function() {
		// clean up after each test
	}
});
]]></code>
	</example>
	<example>
		<desc>Hooks share the same context as their respective test</desc>
<code><![CDATA[
QUnit.module( "Machine Maker", {
	beforeEach: function() {
		this.maker = new Maker();
		this.parts = [ "wheels", "motor", "chassis" ];
	}
});

QUnit.test( "makes a robot", function( assert ) {
	this.parts.push( "arduino" );
	assert.equal( this.maker.build( this.parts ), "robot" );
	assert.deepEqual( this.maker.made, [ "robot" ] );
});

QUnit.test( "makes a car", function( assert ) {
	assert.equal( this.maker.build( this.parts ), "car" );
	this.maker.duplicate();
	assert.deepEqual( this.maker.made, [ "car", "car" ] );
});

]]></code>
	</example>
	<example>
		<desc>Hooks stack on nested modules</desc>
<code><![CDATA[
QUnit.module( "grouped tests argument hooks", function( hooks ) {
	var beforeEach = hooks.beforeEach;
	var afterEach = hooks.afterEach;

	beforeEach( function( assert ) {
		assert.ok( true, "beforeEach called" );
	} );

	afterEach( function( assert ) {
		assert.ok( true, "afterEach called" );
	} );

	QUnit.test( "call hooks", function( assert ) {
		assert.expect( 2 );
	} );

	QUnit.module( "stacked hooks", function( hooks ) {
		var beforeEach = hooks.beforeEach;
		var afterEach = hooks.afterEach;

		beforeEach( function( assert ) {
			assert.ok( true, "nested beforeEach called" );
		} );

		afterEach( function( assert ) {
			assert.ok( true, "nested afterEach called" );
		} );

		QUnit.test( "call hooks", function( assert ) {
			assert.expect( 4 );
		} );
	} );
} );
]]></code>
	</example>
	<category slug="test"/>
</entry>
