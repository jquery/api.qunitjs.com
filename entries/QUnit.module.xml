<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry type="method" name="QUnit.module">
	<title>QUnit.module()</title>
	<signature>
		<argument name="name" type="String">
			<desc>Label for this group of tests.</desc>
		</argument>
		<argument name="hooks" type="PlainObject" optional="true">
			<desc>Callbacks to run during test execution.</desc>
			<property name="before" type="Function">
				<desc>Runs before the first test.</desc>
			</property>
			<property name="beforeEach" type="Function">
				<desc>Runs before each test.</desc>
			</property>
			<property name="afterEach" type="Function">
				<desc>Runs after each test.</desc>
			</property>
			<property name="after" type="Function">
				<desc>Runs after the last test. If additional tests are defined after the module's queue has emptied, it will not run this hook again.</desc>
			</property>
		</argument>
		<argument name="nested" optional="true">
			<desc>A callback with grouped tests and nested modules to run under the current module label.</desc>
			<type name="Function">
				<argument name="hooks" type="Object"></argument>
			</type>
		</argument>
	</signature>
	<desc>
		Group related tests under a single label.
	</desc>
	<longdesc>
		<p>
			You can use the module name to organize, select, and filter tests to run.
		</p>
		<p>
			All tests inside a module callback function will be grouped into that module. The test names will all be preceded by the module name in the test results. Other modules can be nested inside this callback function, where their tests' names will be labeled by their names recursively prefixed by their parent modules.
		</p>
		<p>
			If <code>QUnit.module</code> is defined without a <code>nested</code> callback argument, all subsequently defined tests will be grouped into the module until another module is defined.
		</p>
		<p>
			Modules with test group functions allow you to define nested modules, and QUnit will run tests on the parent module before going deep on the nested ones, even if they're declared first. Additionally, any hook callbacks on a parent module will wrap the hooks on a nested module. In other words, <code>before</code> and <code>beforeEach</code> callbacks will form a <a href="https://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29">queue</a> while the <code>afterEach</code> and <code>after</code> callbacks will form a <a href="https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29">stack</a>.
		</p>
		<p>
			You can specify code to run before and after tests using the hooks argument, and also to create properties that will be shared on the testing context. Any additional properties on the <code>hooks</code> object will be added to that context. The <code>hooks</code> argument is still optional if you call <code>QUnit.module</code> with a callback argument.
		</p>
		<p>
			The module's callback is invoked with the test environment as its <code>this</code> context, with the environment's properties copied to the module's tests, hooks, and nested modules. Note that changes on tests' <code>this</code> are not preserved between sibling tests, where <code>this</code> will be reset to the initial value for each test.
		</p>
		<p class="warning">
			<strong>DEPRECATION Note:</strong> <code>beforeEach</code> and <code>afterEach</code> were previously named <code>setup</code> and <code>teardown</code>, which still exist and will be removed in QUnit 2.0.0.
		</p>
	</longdesc>
	<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "group a" );
QUnit.test( "a basic test example", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 2", function( assert ) {
	assert.ok( true, "this test is fine" );
});

QUnit.module( "group b" );
QUnit.test( "a basic test example 3", function( assert ) {
	assert.ok( true, "this test is fine" );
});
QUnit.test( "a basic test example 4", function( assert ) {
	assert.ok( true, "this test is fine" );
});
]]></code>
	</example>
		<example>
		<desc>Use the <code>QUnit.module()</code> function to group tests together:</desc>
<code><![CDATA[
QUnit.module( "module a", function() {
	QUnit.test( "a basic test example", function( assert ) {
		assert.ok( true, "this test is fine" );
	});
});

QUnit.module( "module b", function() {
	QUnit.test( "a basic test example 2", function( assert ) {
		assert.ok( true, "this test is fine" );
	});

	QUnit.module( "nested module b.1", function() {

		// This test will be prefixed with the following module label:
		// "module b > nested module b.1"
		QUnit.test( "a basic test example 3", function( assert ) {
			assert.ok( true, "this test is fine" );
		});
	});
});
]]></code>
	</example>
	<example>
		<desc>A sample for using the before, beforeEach, afterEach, and after callbacks</desc>
<code><![CDATA[
QUnit.module( "module A", {
	before: function() {
		// prepare something once for all tests
	}
	beforeEach: function() {
		// prepare something before each test
	},
	afterEach: function() {
		// clean up after each test
	},
	after: function() {
		// clean up once after all tests are done
	}
});
]]></code>
	</example>
	<example>
		<desc>Hooks share the same context as their respective test</desc>
<code><![CDATA[
QUnit.module( "Machine Maker", {
	beforeEach: function() {
		this.maker = new Maker();
		this.parts = [ "wheels", "motor", "chassis" ];
	}
});

QUnit.test( "makes a robot", function( assert ) {
	this.parts.push( "arduino" );
	assert.equal( this.maker.build( this.parts ), "robot" );
	assert.deepEqual( this.maker.made, [ "robot" ] );
});

QUnit.test( "makes a car", function( assert ) {
	assert.equal( this.maker.build( this.parts ), "car" );
	this.maker.duplicate();
	assert.deepEqual( this.maker.made, [ "car", "car" ] );
});

]]></code>
	</example>
	<example>
		<desc>Hooks stack on nested modules</desc>
<code><![CDATA[
QUnit.module( "grouped tests argument hooks", function( hooks ) {
	hooks.beforeEach( function( assert ) {
		assert.ok( true, "beforeEach called" );
	} );

	hooks.afterEach( function( assert ) {
		assert.ok( true, "afterEach called" );
	} );

	QUnit.test( "call hooks", function( assert ) {
		assert.expect( 2 );
	} );

	QUnit.module( "stacked hooks", function( hooks ) {

		// This will run after the parent module's beforeEach hook
		hooks.beforeEach( function( assert ) {
			assert.ok( true, "nested beforeEach called" );
		} );

		// This will run before the parent module's afterEach
		hooks.afterEach( function( assert ) {
			assert.ok( true, "nested afterEach called" );
		} );

		QUnit.test( "call hooks", function( assert ) {
			assert.expect( 4 );
		} );
	} );
} );
]]></code>
	</example>
	<category slug="test"/>
</entry>
